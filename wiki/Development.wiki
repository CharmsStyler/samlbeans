#summary Developer documentation for source code work

= Introduction =

This page covers material interesting to developers as they work on the source code.

= Details =

2010-10-22: This project was only founded 2 days ago, so there is still quite a bit to do.  This has been the development workflow thus far:

  # Each SAML 2.0 schema is reflected in its own maven module under `project-root`/schemas/_schemaName_.
  # Each schema module uses a Maven JAXB plugin to convert the Schema `.xsd` file to Java code.  The emitted Java code is customized based on a `.xjb` file located in _project-root_/schemas/_schema-module-root_/src/main/xjb/_schema-name_`.xjb`.  The `.xjb` files exist mostly to remove any `Type` suffix from the generated code (the whole purpose of this project is to be able to use concrete classes and not have 'Type' interfaces everwhere that need to be instantiated by Factories ad-nauseum.  Otherwise we could just use Open Saml and this project wouldn't be necessary).
  # Once the code is generated by JAXB, it is manually copied into a _project-root_/_module-name_ maven module where the code will then be manually edited and managed long-term.

This workflow exists to ensure 3 things:
  * That the Java code accurately represents its specification schema.
  * JAXB annotations are automatically added to the source code by JAXB XJC so we don't have to do this ourselves (and to ensure the annotations are correctly placed)
  * Once generated, we can edit the code as necessary to provide a more robust POJO library.`*`

`*`An important note on the last bullet point is that the developers must ensure that the JAXB annotations aren't changed!  They reflect a specification schema and should not be altered if the code is to remain compliant with the specification.

It is typically bad form to manually maintain JAXB-generated code since the schema could change and your code would be invalid. However SAML 2.0 is a final specification and won't change (a new version would arise instead), and not something we need to worry about.

The long-term code base then becomes POJOs that we can maintain and JAXB can still be used to marshall/unmarshall the XML as necessary.